import com.fasterxml.jackson.core.JsonProcessingException;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;

import static Service.ExtractData.extractPagesJaunesFR;

public class Server extends AbstractVerticle
{
    //The httpServer starts in this method.//
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @Override
    public void start(final Future<Void> startFuture) throws Exception
    {
        HttpServer httpServer = vertx.createHttpServer();

        //Instanciate the router//
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        final Router router = Router.router(vertx);

        System.out.println("My Server started!");

        router.route().handler(BodyHandler.create());
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Instanciate the router//

        //Yellow_Pages//
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //Pages_Jaunes_FR//
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        router.get("/api/Yellow_Pages/Pages_Jaunes_Fr/:url").handler(this::handler_Web_Pages_Jaunes_Fr);
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Pages_Jaunes_FR//


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Yellow_Pages//

        httpServer.requestHandler(router::accept);

        httpServer.listen(9898, res -> {
            if (res.succeeded())
            {
                startFuture.complete();
            }
            else {
                startFuture.fail(res.cause());
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //The httpServer starts in this method.//

    //Handlers//
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //Yellow_Pages//
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //Pages_Jaunes_FR//
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void handler_Web_Pages_Jaunes_Fr(RoutingContext routingContext)
    {
        String query = routingContext.request().query();

        //System.out.println(query);

        //localhost:9898/api/Yellow_Pages/Pages_Jaunes_Fr/query?url=
        String finalURL = query.substring(4, query.length());

        //System.out.println(finalURL);

        System.out.println("handler_Web_Pages_Jaunes_Fr");

        HttpServerResponse response = routingContext.response();

        response.putHeader("Content-Type", "application/json");

        try {
            response.end(extractPagesJaunesFR(finalURL));
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Pages_Jaunes_FR//

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Yellow_Pages//

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Handlers//

    //Stop the server.//
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @Override
    public void stop(Future stopFuture) throws Exception
    {
        System.out.println("My Server stopped!");
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Stop the server.//
}